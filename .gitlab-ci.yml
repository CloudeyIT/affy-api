stages:
  - build
  - test
  - deploy

build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

build-test:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f Test.Dockerfile --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA-test" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA-test"
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Test.Dockerfile

test:
  image: 
    name: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA-test"
    entrypoint: [""]
  stage: test
  needs:
    - build-test
  services:
    - postgres:14
  variables:
    POSTGRES_DB: Affy_test
    POSTGRES_USER: Affy_test
    POSTGRES_PASSWORD: Affy_test
    POSTGRES_HOST_AUTH_METHOD: trust
    APP_ConnectionStrings__MainDb: "Server=postgres;Port=5432;Database=Affy_test;User Id=Affy_test;Password=Affy_test;"
    APP_Identity__PrivateKey: $TEST_PRIVATE_KEY
    SNAPSHOOTER_STRICT_MODE: "true"
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/artifacts/test-result.xml
      - $CI_PROJECT_DIR/artifacts/coverage/**/coverage.cobertura.xml
    reports:
      cobertura:
        - $CI_PROJECT_DIR/artifacts/coverage/**/coverage.cobertura.xml
      junit:
        - $CI_PROJECT_DIR/artifacts/test-result.xml
  coverage: /COVERAGE:\s(\d+.\d+)/
  script: 
    - 'dotnet test 
    --no-build 
    --logger:"junit;LogFilePath=$CI_PROJECT_DIR\artifacts\test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" 
    -r $CI_PROJECT_DIR/artifacts/coverage
    --collect:"XPlat Code Coverage" 
    -s /src/Affy.Test/coverlet.runsettings
    /src/Affy.Test/Affy.Test.csproj'
    - 'pwsh /src/scripts/print-test-coverage.ps1 $CI_PROJECT_DIR/artifacts/coverage'

security-check:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:6.0
  allow_failure: true
  script:
    - 'dotnet restore'
    - 'OUTPUT=$(dotnet list package --vulnerable --include-transitive)'
    - 'echo "${OUTPUT}"'
    - 'if [[ ${OUTPUT} == *"has the following vulnerable packages"* ]]; then exit 1; else exit 0; fi'
